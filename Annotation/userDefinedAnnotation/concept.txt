Class Level Annotation Example
The first step toward creating a custom annotation is to declare it using the @interface
 keyword:
--------------------------------------
public @interface JsonSerializable {
}
-------------------------------------
The next step is to add meta-annotations to specify the scope and the target of our 
custom annotation:
-----------------------------------------
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.Type)
public @interface JsonSerializable {
}
-------------------------------------------
As we can see, our first annotation has runtime visibility, 
and we can apply it to types (classes). Moreover, it has no methods, 
and thus serves as a simple marker to mark classes that can be serialized into JSON.
--------------------------------------------------------------------------------
Types Of Target in user defined annotation: 

ElementType.ANNOTATION_TYPE: This is used to annotate another annotation. 
An annotation can be applied to other annotations.

@Target(ElementType.ANNOTATION_TYPE)
public @interface MetaAnnotation {
    // ...
}

ElementType.CONSTRUCTOR: This is used to annotate constructors of a class.

@Target(ElementType.CONSTRUCTOR)
public @interface ConstructorAnnotation {
    // ...
}

ElementType.FIELD: This is used to annotate fields (variables) within a class.

@Target(ElementType.FIELD)
public @interface FieldAnnotation {
    // ...
}

ElementType.LOCAL_VARIABLE: This is used to annotate local variables within a method.

@Target(ElementType.LOCAL_VARIABLE)
public @interface LocalVariableAnnotation {
    // ...
}

ElementType.METHOD: This is used to annotate methods within a class.

@Target(ElementType.METHOD)
public @interface MethodAnnotation {
    // ...
}

ElementType.PACKAGE: This is used to annotate a Java package.

@Target(ElementType.PACKAGE)
public @interface PackageAnnotation {
    // ...
}

ElementType.PARAMETER: This is used to annotate parameters of a method or constructor.

@Target(ElementType.PARAMETER)
public @interface ParameterAnnotation {
    // ...
}

ElementType.TYPE: This is used to annotate classes, interfaces, or enums.

@Target(ElementType.TYPE)
public @interface TypeAnnotation {
    // ...
}

ElementType.TYPE_PARAMETER: This is used to annotate the type parameter of a generic class, interface, method, or constructor.

@Target(ElementType.TYPE_PARAMETER)
public @interface TypeParameterAnnotation {
    // ...
}


ElementType.TYPE_USE: This is used to annotate any use of a type.

@Target(ElementType.TYPE_USE)
public @interface TypeUseAnnotation {
    // ...
}
---------------------------------------------------------------------------